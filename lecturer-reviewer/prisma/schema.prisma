// schema.prisma - Lecturer Review Platform
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Campus {
    id        String     @id @default(cuid())
    name      String     @unique
    slug      String     @unique // for URL-friendly campus names
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    lecturers Lecturer[]

    @@index([slug])
}

model Lecturer {
    id          String   @id @default(cuid())
    name        String
    department  String?
    campusId    String
    campus      Campus   @relation(fields: [campusId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // User who added this lecturer (requires authentication)
    addedBy     User     @relation(fields: [addedById], references: [id])
    addedById   String
    
    reviews     Review[]
    comments    Comment[]
    
    @@unique([name, campusId]) // Same lecturer name can exist across different campuses
    @@index([name])
    @@index([campusId])
}

model Review {
    id               String   @id @default(cuid())
    
    // Core ratings (1-5 scale)
    teachingQuality  Int      // Teaching effectiveness, clarity, engagement
    fairness         Int      // Grading fairness, workload appropriateness  
    helpfulness      Int      // Availability, support, responsiveness
    wouldRecommend   Boolean  // Simple yes/no recommendation
    
    // Optional context fields
    courseName       String?  // Which course this review is for
    semester         String?  // e.g., "Fall 2024", "Spring 2025"
    
    // Reviewer info (no account needed)
    reviewerName     String   // Anonymous name provided by reviewer
    
    // Relations
    lecturerId       String
    lecturer         Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
    
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    
    @@index([lecturerId])
    @@index([createdAt])
}

model Comment {
    id           String   @id @default(cuid())
    content      String   @db.Text
    
    // Optional context fields
    courseName   String?  // Which course this comment is about
    semester     String?  // e.g., "Fall 2024", "Spring 2025"
    
    // Commenter info (no account needed)
    commenterName String  // Anonymous name provided by commenter
    
    // Relations
    lecturerId   String
    lecturer     Lecturer @relation(fields: [lecturerId], references: [id], onDelete: Cascade)
    
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    
    @@index([lecturerId])
    @@index([createdAt])
}

// Necessary for NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    username String? @unique
    password String?
    // Users can add lecturers to the platform
    addedLecturers Lecturer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}